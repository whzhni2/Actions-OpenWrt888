name: JDCloud-AX6000-Baili-hanwckf


on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      MAC_ORDER:
        description: 'Use the original MAC address order'
        required: true
        default: true
        type: boolean
      
      GSW:
        description: 'Use GSW switch driver (non-DSA)'
        required: true
        default: false
        type: boolean
      APP_MTK:
        description: 'Use luci-app-mtk wifi config'
        required: true
        default: false
        type: boolean
      NO_DOCKERMAN:
        description: 'Not build luci-app-dockerman'
        required: true
        default: false
        type: boolean
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'


env:
  immortalwrt_NAME: immortalwrt
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: JDCloud-AX6000-Baili/.mtwifi-cfg.config
  DIY_P1_SH: JDCloud-AX6000-Baili/diy-part1.sh
  DIY_P2_SH: JDCloud-AX6000-Baili/diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai


jobs:
  build:
    runs-on: ubuntu-20.04


    permissions:
      contents: write
    
    steps:
    - name: 检查项目分支
      uses: actions/checkout@main
      
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 清理磁盘空间(Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: false
        dotnet: false
        haskell: false
        large-packages: false
        swap-storage: false
        
    - name: 下载固件源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH immortalwrt
        ln -sf /workdir/immortalwrt $GITHUB_WORKSPACE/immortalwrt
        
    - name: 加载feeds.conf.default & DIY_P1_SH
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF immortalwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd immortalwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 更新 & 安装 feeds
      run: |
        cd immortalwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 加载config & DIY_P2_SH
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt/.config
        chmod +x $DIY_P2_SH
        cd immortalwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    # 其他步骤保持不变，直到编译固件部分


    - name: 压缩固件
      run: |
        cd immortalwrt/bin/targets/*/*
        mkdir -p release
        cp *.bin *.itb *.manifest *.buildinfo release/
        zip -r firmware.zip release
        tar -czvf firmware.tar.gz release
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        
    - name: 生成固件Release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        touch release.txt
        echo "- 使用源码：${{ env.REPO_URL }}" >> release.txt
        echo "- 登录地址：${{ env.IP_ADDR }}" >> release.txt
        if [[ "${{ env.MAC_FIX }}" == '-MAC_fix' ]]; then
               echo "- 修改源码 使用原厂的MAC地址顺序" >> release.txt
        else
               echo "- 未修改源码中的MAC地址顺序" >> release.txt
        fi
        echo "- mt_wifi firmware: ${{ env.WA_FW }}" >> release.txt
        echo "- &ensp;&ensp;warp firmware: ${{ env.WO_FW }}" >> release.txt
        if [[ "${{ env.SWITCH }}" == '-gsw' ]]; then
               echo "- 使用GSW交换机驱动（非DSA）" >> release.txt
        else
               echo "- 使用DSA交换机驱动" >> release.txt
        fi
        if [[ "${{ env.WIFI_INTERFACE }}" == '-mtwifi' ]]; then
                echo "- 使用hanwckf mtwifi-cfg原生luci无线配置工具" >> release.txt
        else
                echo "- 使用mtk-sdk luci-app-mtk无线配置工具" >> release.txt
        fi
        if [[ "${{ env.BUILD_DOCKERMAN }}" == '-docker' ]]; then
                echo "- 已编译luci-app-dockerman" >> release.txt
        else
                echo "- 未编译luci-app-dockerman" >> release.txt
        fi
        echo "release_tag=${{ env.FILE_DATE }}-${{ env.immortalwrt_NAME }}-${{ env.DEVICE_NAME }}${{ env.SWITCH }}${{ env.WIFI_INTERFACE }}${{ env.BUILD_DOCKERMAN }}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 发布固件至Release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          ${{ env.FIRMWARE }}/firmware.zip
          ${{ env.FIRMWARE }}/firmware.tar.gz
        name: ${{ env.FILE_DATE }}-${{ env.immortalwrt_NAME }}-${{ env.DEVICE_NAME }}${{ env.SWITCH }}${{ env.WIFI_INTERFACE }}${{ env.BUILD_DOCKERMAN }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
